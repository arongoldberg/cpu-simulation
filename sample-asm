Sample input to asm:
math.s

Contents of math.s:
# Some simple math stuff

# add, addi, and sub work as you expect, except
# they take three arguments. The first argument
# is the destination, the other two are the
# sources.
# There is no subi. Instead you have to use addi
# with a negative immediate.
addi $1, $0, 5      # $1 := 5
addi $2, $1, -2     # $2 := $1 + (-2)
add $3, $1, $2      # $3 := $1 + $2

# Notice that $0 is special, because it is always
# zero. So using $0 as a source lets us effectively
# do a movi, as in the first instruction below.
addi $4, $0, 55     # $4 := 55
sub $5, $4,$1      # $5 := $4 - $1

# We also have bitwise operators AND and OR.
# (but not ori and andi). As above, the first
# operand is the destination register.
or $6, $2, $5
and $7,$2, $5

halt       # end the program with an infinite loop

Sample output of asm:
ram[0] = 16'b1110000010000101;
ram[1] = 16'b1110010101111110;
ram[2] = 16'b0000010100110000;
ram[3] = 16'b1110001000110111;
ram[4] = 16'b0001000011010001;
ram[5] = 16'b0000101011100011;
ram[6] = 16'b0000101011110010;
ram[7] = 16'b0100000000000111;
